1、进入场景只有Bootup这个可执行的程序
  只有Awake，会做初始化工作。包括：创建GameManager物体，定targetFrame、runInBackground、Screen.sleepTimeout。
  然后就会有三个组件被挂载到GameManager物体上：
  （a）SceneLoader
  （b）LuaManager
  （c）ResourceManager
  （d）GameManager

  其中，
  
  （a）SceneLoader提供一个LoadScene的接口，里面使用Unity的Update()提供心跳，这个类主要是用于异步加载场景提供进度、完成功能
  （b）LuaManager提供几个接口，可以执行lua文件，FixUpdate()用来给lua提供心跳。这个类还实现IManager功能，OnInitialize、OnUpdateLogic、OnDestruct，都在后面的GameManager中被调用。
  （c）ResourceManager提供LoadPrefab、LoadAsset等功能，还实现了IManager接口。
  （d）GameManager是最重的一个地方,有Unity的Awake、Update，还实现了IManager接口。不过IManager接口的调用都是Awake等Unity的心跳提供更新。这里，会有几个模块进入：
       NetworkManager、LuaManager、ResourceManager、AudioManager、CSharpCallLuaDelegates，还提供了解压缩包的功能。

     GameManager通过自身的Awake，让NetworkManager、LuaManager、ResourceManager、AudioManager、CSharpCallLuaDelegates都OnInitialize（最后一个是Initialize）。
     这里特别说明的是最后一个，这个初始化DoFile("main")，启动了第一个lua文件。这个运行后就把lua的GameManager和NetworkManager绑定好了。而后，lua的GameManager（在C#中是
     CSharpCallLuaDelegates.Instance.LuaGameManagerEntry的init()就会被调用。所以，lua侧的GameManager初始化完毕。

     这样，整体的初始化结束。

     GameManager通过自身的Update()，给NetworkManager、LuaManager、ResourceManager提供OnUpdateLogic。
     NetworkManager在每帧给Http调用提供心跳，从网络缓冲中取数据通过CSharpCallLuaDelegates.LuaNetworkEntry.onReceiveMsg()处理逻辑。
     LuaManager在每帧调用CSharpCallLuaDelegates.LuaGameManagerEntry.update()
     ResouceManager在每帧是空的。

     总结：
     到初始化完毕，每帧有
     SceneLoader.Update()
     LuaManager.FixUpdate() -> CSharpCallLuaDelegates.LuaGameManagerEntry.fixUpdate()
     GameManager.Update() -> NetworkManager.onUpdateLogic()  -> HttpHelper.Invoke()（静态类）、CSharpCallLuaDelegates.LuaGameManagerEntry.update()
                          -> LuaManager.onUpdateLogic()      -> CSharpCallLuaDelegates.LuaGameManagerEntry.update()
                          -> ResourceManager.onUpdateLogic() -> 空运行
     AudioManager因为没有需要心跳推动，所以只是开了Play、SetVolumn等接口供调用（相应的用上LuaCallCSharp就给了lua使用）

  所以，C#部分的框架就是这么推进。

2、Lua部分的框架

main是第一个被加载的文件（在上面的d部分），这里对Lua中的GameManager对象，NetworkManager对象，提供了C#绑定，用于调用它们的update()和GameManager的fixedUpdate()

main里面，有这么些全局变量：
DataTrunk、NetworkManager、TimerManager、LevelManager、UIManager、ConfigManager、GameObjectManager、AudioManager

UIManager中提供了方法，OpenController，用于打开一个面板。所有面板都需要在UI.core.UIDefine中定义，这样每个面板中只要知道名字，就能打开其他的面板。


3、UI部分

每个UI对用户来说就只是controller，使用OpenController打开。这个方法中会

UIManager中，initialize方法最后调用下面的方法，开启第一个画面：
（a)UIManager.openController(UIManager.ControllerName.LoginMain)，参数实际上是字符串“UI.Login.LoginMainController”，代表了Lua文件夹UI/Login/LoginMainController.lua，openController本身就是调用下面的（b）。

（b）Facade::openController方法会通过名字检查一个controller是否已经加载过，过程如下：
    每个Control，在lua文件头部都是调用
    UIManager.Controller(controlName, viewName)，这个是做了一个实例(该实例继承Controller)。因为继承的自定义写法，构造方法最后会调用
    UIManager.registerController(self)，这个其实调用
    Facade.registerController(data)，才是真正的往自身的table ControllerCenter中填入了“窗口”的control名字和view的名字

    然后才是：
    
    没有加载的就会使用ctrl:create()
    这里面会查看对应的view是不是空的（一个controller对应一个view)，不空表示已经加载过了，就会直接返回。否则就把view的lua require进来，然后调用view::LoadView()，在给创建的view一个onCreate()回调；然后是查看subController有没有，有的话为每个subController：create()，这个就是现在说的一样；最后是根据UIDisposeConfig中的数据，给controller一个定时器，用来自动销毁它。（实际上估计没有用，里面只配置了3个值，其中两个还是-1（永久），一个3）。


    Controller:create() -> require View
                         -> View:LoadView
                         -> self:onCreate()
                         -> subController:create()
                         -> self.TimerCd = newTimer()，通过给这个Timer一个自己的destroy回调让自动回收发挥作用。


    Facade:openController方法在调用上面的create()后，紧接着就是调用ctrl:open(data)

    Controller:open() -> self:onOpen()
                      -> self.SubCtrl:open()
                      -> UIManager.pushingStack(self)
                      -> TimerCd:pause() （如果有timer绑上）

    到此可以看出openController虽然调用create()和open()，但是create中一开始就会通过对应的view是否为空来判别第一次还是第n次，只有第一次才会走上面的一切。但是open()就会在第一次、第n次都一样走动。

    由第一个画面（该画面由LoginMainController.lua和LoginView.lua配合完成。Controller中还有2、3个subCtrl）提供的功能，当Loin OK的时候来看,

    local function loginOk()
      if not _C.IsOpen then
          return
      end

      -- 有角色
      _C:close()
      LevelManager.loadScene(LevelType.MainCity)
    end

    这里会调用Controller:close()（因为没有重载的），看一下这个close()做什么

    Controller:close() -> UIManager:popingStack(self)
                       -> subCtrl:close()
                       -> self:onClose()
                       -> timer处理

    这个和Controller:destroy()还是有差别的


